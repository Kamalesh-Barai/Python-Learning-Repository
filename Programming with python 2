# Break and continue statement
# Find the square of any positive or negative number.

while True:
    num = int(input("Please type a number (type 0 for exit): " ))
    print("square of", num, "is: ", num*num)
    if num == 0:
        break
    
# If i want to find the square of any positive number only.

while True:
    num = int(input("Please enter a positive number (0 to exit): "))
    if num < 0:
        print("We only allow positive number. Please try again.")
        continue
    if num == 0:
        break
    print("Square of", num, "is: ", num * num)

# Eaxmple - break - continue - add, sub, quit
terminate_program = False
while not terminate_program:
    number1 = int(input("Please enter a number: "))
    number2 = int(input("Please enter another number: "))
    
    while True:
        operation = input("Please enter add/sub or quit to exit: ")
        
        if operation == "quit":
            terminate_program = True
            break
        if operation not in ["add", "sub"]:
            print("Unknown Operation")
            continue
        if operation == "add":
            print("Result is: ", number1 + number2)
            break
        if operation == "sub":
            print("Result is: ", number1 - number2)
            break

# Function - Now we will see how to make function. When we need to do a
# specific job over again and again, then we will build a function for that job.
# Suppose, i have to add two numbers many times to a program. Then we can create
# a function for that task.

def add(n1, n2):    # Here n1, n2 is paramiter
    return n1 + n2

add(55, 5)

number1 = 10
number2 = 3
print(add(number1, number2))  # Here number1, number2 is argument

# We can make a function for draw square

def draw_square(side_length):
    import turtle
    for i in range(4):
        turtle.forward(side_length)
        turtle.left(90)
    turtle.exitonclick()
    
draw_square(100)

# Making circle using cone color square
def draw_square(side_length):
    import turtle
    turtle.speed(0)
    for i in range(36):
        for i in range(4):
            turtle.color("red")
            turtle.forward(side_length)
            turtle.left(90)           
        turtle.right(10)     
    turtle.exitonclick()

draw_square(100)

# Making circle using two color square
def draw_square(side_length):
    import turtle
    turtle.speed(0)
    for i in range(18):
        for i in range(4):
            turtle.color("red")
            turtle.forward(side_length)
            turtle.left(90)           
        turtle.right(10)       
        for i in range(4):
            turtle.color("green")
            turtle.forward(side_length)
            turtle.left(90)      
        turtle.right(10)     
    turtle.exitonclick()

draw_square(100)

# Another way to create circle
import turtle
def draw_square(side_length):
    for i in range(4):
        turtle.forward(side_length)
        turtle.left(90)

counter = 0
while counter < 90:
    turtle.speed(0)
    draw_square(100)
    turtle.right(4)
    counter += 1
turtle.exitonclick()

# Create a function to draw a equilateral triangle

def equ_triangle(length):
    import turtle
    for i in range(3):
        turtle.forward(length)
        turtle.left(120)
    turtle.exitonclick()

equ_triangle(100)

# Some example to know more about function
# Variables that are created inside a function, called local variable of
# that function. They are not exist outside of function.

def myfunc(x):
    print("inside myfnc", x)
    x = 10
    print("inside myfnc", x)

x = 20
myfunc(x)
print(x)

# If there is any variable outside of function, then i can get that variable
# from into the function. Its called Global variable. But i can't get
# local variable form the oustside of the function.

def myfunc(y):
    print("y = ", y)
    print("x = ", x)

x = 20
myfunc(x)

# Now we will see how to add default value to a function parameter.

def myfunc(y = 10):
    print("y = ", y)

x = 20
myfunc(x)
myfunc()

# If we set a function parameter as the default value, then all subsequent
# parameters has to be default values.

def myfunc(x, y = 10, z):
    print("x =", x, "y =", y, "z =", z)

x = 5
y = 6
z = 7
myfunc(x, y, z)  # Will show error

# Corrected
def myfunc(x, y = 10, z = 0):
    print("x =", x, "y =", y, "z =", z)

x = 5
y = 6
z = 7
myfunc(x, y, z)
myfunc(x, y)
myfunc(x)

# If we want, there will be no default value of z parameter.

def myfunc(x, z, y = 10):
    print("x =", x, "y =", y, "z =", z)
    
myfunc(x = 1, y = 3, z = 5)

a = 5; b = 6
myfunc(x = a, z = b)

a = 1; b = 2; c = 3
myfunc(y = a, z = b, x = c)

# If we want, we can send list into function. Now i will write a function,
# where function will take a list as argument and add the numbers of list
# and will return the summation.

def add_numbers(numbers):
    result = 0
    for number in numbers:
        result += number
    return result

result = add_numbers([1, 2, 3, 4, 5, 6, 7, 8])
print(result)

# If the list is changed in the function where the list was sent, the original
# list will also be changed.
# If we want to get any specific element of list, like first, second or third
# element, then we can mention the number into square bracket[]. Its called index.
# Python indexing starts from 0.

num = [12, 4, 3, 5, 45, 78]
print(num[4])

def test_func(li):
    li[0] = 10        # Changing the list into function

my_list = [1, 2, 3, 4]
print("Before function call", my_list)
test_func(my_list)
print("After function call", my_list)

# When we assign a list into another variable, there won't create any new list.
# The list will be same in old and new variable.

list1 = [1, 2, 3, 4]
list2 = list1
print(list1)
print(list2)
list2[0] = 100
print(list2)
print(list1)

# There is a built in function for add numbers of a list. We can use it when
# we need it. sum() function

li = [1, 2, 3]
print(sum(li))

# Create a function, that takes a list as a parameter and return the mean
# of list numbers.

def mean_of_list(li):
    result = 0
    for number in li:
        result += number
    mean = result / len(li)
    return mean

mean_of_list(list1)

# Create a function for multiplication table. Sending a number to that function
# will print the multiplication table of that number. If any number not sent
# to that funtion, then function will print 1's multiplication table.

def multiplication_table(number = 1):
    for m_num in range(1, 11):
        print(number, "X", m_num, "=", number * m_num)

multiplication_table(56)

# String - strings are made up by zero or more characters or symbols.
# Strings start and end with either double quotation or single quotation.
# We can find out how many letters in a string with len() function.

s = "hello world"
len(s)

l = len(s)
l

print(l)

s = ""
len(s)

# If we have to print single quotation like - Dimik's
# We can do this in two different ways.

s = "Dimik's"
print(s)

s = 'Dimik\'s'
print(s)

# We can get every single letter seperately by indexing.

country = "Bangladesh"
country[0]
country[1]
country[2]
country[3]
country[4]
country[5]
country[6]
country[7]
country[8]
country[9]

# We can apply loop on string

country = "Bangladesh"
for c in country:
    print(c)

# There is a difference between string and list. We can change the element of
# list but its not possible to string. That's why strings are called immutable
# or non-mutable.

c = ["A", "B", "C"]
print(c)
c[0] = 'a'
print(c)

country = "Bangladesh"
country[0] = 'b'

# We can use plus sign + to add two strings.

country = "Bangla" + "desh"
print(country)

x = "50" + "5"
print(x)

# Many times we have to find a specific string into a string, then we will
# use find() method.

country = "Bangladesh"
country.find("Ban")
country.find("ang")
country.find("Bangla")

# If what we are looking is not found, then find() method return -1
country.find("Bengla")
country.find("desh")

# If we want to replace something into a string, then we can use replace() method.
# replace() method returns a new string but there is no change in main string.

country ="North Korea"
new_country = country.replace("North", "South")
print(new_country)
print(country)

text = "this is test. this is another test. this is final test."
new_text = text.replace("this", "This")
print(new_text)
print(text)

text = "hello"
text = text.replace("h", "H")
print(text)

# Exclude the space character at the start and end place of string.
# lstrip() exclude the left side space character. # rstrip() exclude the
# right side space character. strip() exclude both sides space charcater.

text = " this is a string. "
text
text.lstrip()
text.rstrip()
text.strip()
text

# lowercase to uppercase - uppercase to lowercase and captalize

string = "Bangladesh"
string_up = string.upper()
string_up

string_up_to_lo = string_up.lower()
string_up_to_lo

cap_string_up_to_lo = string_up_to_lo.capitalize()
cap_string_up_to_lo

# Split a string into a list where each word is a list item
# The split() method splits a string into a list

string = "I am a programmer"
words = string.split()
print(words)

for word in words:
    print(word)
    
txt = "Welcome to the jungle"
word = txt.split()
print(word)

# split the string, using comma, followed by a space, as a seperator

txt = "hello, my name is peter, I am 26 years old"
spliting = txt.split(", ")
spliting

# use a hash character as a seperator

txt = "apple#banna#cherry#orange"
spliting = txt.split("#")
spliting

# split the string into a list with max 2 items

txt = "apple#banna#cherry#orange"
spliting = txt.split("#", 1)
spliting

# count() method returns the number of elements with the specified value.

string = "This is"
string.count("is")

fruits = ["apple", "bannana", "cherry"]
fruits.count("cherry")



