# Break and continue statement
# Find the square of any positive or negative number.

while True:
    num = int(input("Please type a number (type 0 for exit): " ))
    print("square of", num, "is: ", num*num)
    if num == 0:
        break
    
# If i want to find the square of any positive number only.

while True:
    num = int(input("Please enter a positive number (0 to exit): "))
    if num < 0:
        print("We only allow positive number. Please try again.")
        continue
    if num == 0:
        break
    print("Square of", num, "is: ", num * num)

# Eaxmple - break - continue - add, sub, quit
terminate_program = False
while not terminate_program:
    number1 = int(input("Please enter a number: "))
    number2 = int(input("Please enter another number: "))
    
    while True:
        operation = input("Please enter add/sub or quit to exit: ")
        
        if operation == "quit":
            terminate_program = True
            break
        if operation not in ["add", "sub"]:
            print("Unknown Operation")
            continue
        if operation == "add":
            print("Result is: ", number1 + number2)
            break
        if operation == "sub":
            print("Result is: ", number1 - number2)
            break

# Function - Now we will see how to make function. When we need to do a
# specific job over again and again, then we will build a function for that job.
# Suppose, i have to add two numbers many times to a program. Then we can create
# a function for that task.

def add(n1, n2):    # Here n1, n2 is paramiter
    return n1 + n2

add(55, 5)

number1 = 10
number2 = 3
print(add(number1, number2))  # Here number1, number2 is argument

# We can make a function for draw square

def draw_square(side_length):
    import turtle
    for i in range(4):
        turtle.forward(side_length)
        turtle.left(90)
    turtle.exitonclick()
    
draw_square(100)

# Making circle using cone color square
def draw_square(side_length):
    import turtle
    turtle.speed(0)
    for i in range(36):
        for i in range(4):
            turtle.color("red")
            turtle.forward(side_length)
            turtle.left(90)           
        turtle.right(10)     
    turtle.exitonclick()

draw_square(100)

# Making circle using two color square
def draw_square(side_length):
    import turtle
    turtle.speed(0)
    for i in range(18):
        for i in range(4):
            turtle.color("red")
            turtle.forward(side_length)
            turtle.left(90)           
        turtle.right(10)       
        for i in range(4):
            turtle.color("green")
            turtle.forward(side_length)
            turtle.left(90)      
        turtle.right(10)     
    turtle.exitonclick()

draw_square(100)

# Another way to create circle
import turtle
def draw_square(side_length):
    for i in range(4):
        turtle.forward(side_length)
        turtle.left(90)

counter = 0
while counter < 90:
    turtle.speed(0)
    draw_square(100)
    turtle.right(4)
    counter += 1
turtle.exitonclick()

# Create a function to draw a equilateral triangle

def equ_triangle(length):
    import turtle
    for i in range(3):
        turtle.forward(length)
        turtle.left(120)
    turtle.exitonclick()

equ_triangle(100)

# Some example to know more about function
# Variables that are created inside a function, called local variable of
# that function. They are not exist outside of function.

def myfunc(x):
    print("inside myfnc", x)
    x = 10
    print("inside myfnc", x)

x = 20
myfunc(x)
print(x)

# If there is any variable outside of function, then i can get that variable
# from into the function. Its called Global variable. But i can't get
# local variable form the oustside of the function.

def myfunc(y):
    print("y = ", y)
    print("x = ", x)

x = 20
myfunc(x)

# Now we will see how to add default value to a function parameter.

def myfunc(y = 10):
    print("y = ", y)

x = 20
myfunc(x)
myfunc()

# If we set a function parameter as the default value, then all subsequent
# parameters has to be default values.

def myfunc(x, y = 10, z):
    print("x =", x, "y =", y, "z =", z)

x = 5
y = 6
z = 7
myfunc(x, y, z)  # Will show error

# Corrected
def myfunc(x, y = 10, z = 0):
    print("x =", x, "y =", y, "z =", z)

x = 5
y = 6
z = 7
myfunc(x, y, z)
myfunc(x, y)
myfunc(x)

# If we want, there will be no default value of z parameter.

def myfunc(x, z, y = 10):
    print("x =", x, "y =", y, "z =", z)
    
myfunc(x = 1, y = 3, z = 5)

a = 5; b = 6
myfunc(x = a, z = b)

a = 1; b = 2; c = 3
myfunc(y = a, z = b, x = c)

# If we want, we can send list into function. Now i will write a function,
# where function will take a list as argument and add the numbers of list
# and will return the summation.

def add_numbers(numbers):
    result = 0
    for number in numbers:
        result += number
    return result

result = add_numbers([1, 2, 3, 4, 5, 6, 7, 8])
print(result)

# If the list is changed in the function where the list was sent, the original
# list will also be changed.
# If we want to get any specific element of list, like first, second or third
# element, then we can mention the number into square bracket[]. Its called index.
# Python indexing starts from 0.

num = [12, 4, 3, 5, 45, 78]
print(num[4])

def test_func(li):
    li[0] = 10        # Changing the list into function

my_list = [1, 2, 3, 4]
print("Before function call", my_list)
test_func(my_list)
print("After function call", my_list)

# When we assign a list into another variable, there won't create any new list.
# The list will be same in old and new variable.

list1 = [1, 2, 3, 4]
list2 = list1
print(list1)
print(list2)
list2[0] = 100
print(list2)
print(list1)

# There is a built in function for add numbers of a list. We can use it when
# we need it. sum() function

li = [1, 2, 3]
print(sum(li))

# Create a function, that takes a list as a parameter and return the mean
# of list numbers.

def mean_of_list(li):
    result = 0
    for number in li:
        result += number
    mean = result / len(li)
    return mean

mean_of_list(list1)

# Create a function for multiplication table. Sending a number to that function
# will print the multiplication table of that number. If any number not sent
# to that funtion, then function will print 1's multiplication table.

def multiplication_table(number = 1):
    for m_num in range(1, 11):
        print(number, "X", m_num, "=", number * m_num)

multiplication_table(56)

# String - strings are made up by zero or more characters or symbols.
# Strings start and end with either double quotation or single quotation.
# We can find out how many letters in a string with len() function.

s = "hello world"
len(s)

l = len(s)
l

print(l)

s = ""
len(s)

# If we have to print single quotation like - Dimik's
# We can do this in two different ways.

s = "Dimik's"
print(s)

s = 'Dimik\'s'
print(s)

# We can get every single letter seperately by indexing.

country = "Bangladesh"
country[0]
country[1]
country[2]
country[3]
country[4]
country[5]
country[6]
country[7]
country[8]
country[9]

# We can apply loop on string

country = "Bangladesh"
for c in country:
    print(c)

# There is a difference between string and list. We can change the element of
# list but its not possible to string. That's why strings are called immutable
# or non-mutable.

c = ["A", "B", "C"]
print(c)
c[0] = 'a'
print(c)

country = "Bangladesh"
country[0] = 'b'

# We can use plus sign + to add two strings.

country = "Bangla" + "desh"
print(country)

x = "50" + "5"
print(x)

# Many times we have to find a specific string into a string, then we will
# use find() method.

country = "Bangladesh"
country.find("Ban")
country.find("ang")
country.find("Bangla")

# If what we are looking is not found, then find() method return -1
country.find("Bengla")
country.find("desh")

# If we want to replace something into a string, then we can use replace() method.
# replace() method returns a new string but there is no change in main string.

country ="North Korea"
new_country = country.replace("North", "South")
print(new_country)
print(country)

text = "this is test. this is another test. this is final test."
new_text = text.replace("this", "This")
print(new_text)
print(text)

text = "hello"
text = text.replace("h", "H")
print(text)

# Exclude the space character at the start and end place of string.
# lstrip() exclude the left side space character. # rstrip() exclude the
# right side space character. strip() exclude both sides space charcater.

text = " this is a string. "
text
text.lstrip()
text.rstrip()
text.strip()
text

# lowercase to uppercase - uppercase to lowercase and captalize

string = "Bangladesh"
string_up = string.upper()
string_up

string_up_to_lo = string_up.lower()
string_up_to_lo

cap_string_up_to_lo = string_up_to_lo.capitalize()
cap_string_up_to_lo

# Split a string into a list where each word is a list item
# The split() method splits a string into a list

string = "I am a programmer"
words = string.split()
print(words)

for word in words:
    print(word)
    
txt = "Welcome to the jungle"
word = txt.split()
print(word)

# split the string, using comma, followed by a space, as a seperator

txt = "hello, my name is peter, I am 26 years old"
spliting = txt.split(", ")
spliting

# use a hash character as a seperator

txt = "apple#banna#cherry#orange"
spliting = txt.split("#")
spliting

# split the string into a list with max 2 items

txt = "apple#banna#cherry#orange"
spliting = txt.split("#", 1)
spliting

# count() method returns the number of element.

string = "This is"
string.count("is")

fruits = ["apple", "bannana", "cherry"]
fruits.count("cherry")

# startswith() method and endswith() method. 
# The startswith() method checks wheather the string starts with a specific
# string. The endsswith() method checks wheather the string ends with a
# specific string.

string = "Bangladesh"
string.startswith("Ban")
string.startswith("ban")
string.startswith("an")

string.endswith("desh")
string.endswith("h")
string.endswith(("Ban"))

string = "This is string example"
string.startswith("is")
string.startswith("is", 5)
string.startswith("is", 5, 6)
string.endswith("string", -14, -8)
string[-14:-8]

# If someone's name starts with Mr, we will address his as Dear Sir.

name = "Mr. Anderson"
if name.startswith("Mr."):
    print("Dear Sir")

# In the above program we can use textbox for input.

import turtle
name = turtle.textinput("Name", "What is your name?")
name = name.lower()

if name.startswith("mr"):
    print("Hello Sir, how are you?")
elif name.startswith("mrs") or name.startswith("ms") or name.startswith("mrs"):
    print("Hello Madam, how are you?")
else:
    name = name.capitalize()
    print("Hello", name, "! How are you?")
turtle.exitonclick()

# A program that find the numbers of letter in a string. 

string = "a quick brown fox jumps over the lazy dog" # That string contains all letters
for c in "abcdefghijklmnopqrstuvwxyz":
    print(c, string.count(c))

# Write a program that will take string as a input and will return 4 strings
# from that string. First string will have only capital latters. Second string
# will have only small letters. Third string will have only numbers and 
# everything else will have in the fourth string.

def split_string(string):
    cap = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    sma = "abcdefghijklmnopqrstuvwxyz"
    sign = "<>?'|}{+_)(*&^%$#@!\",./;:\][=-"
    num = "0123456789"
    
    up_ch = ""
    sm_ch = ""
    nu_ch = ""
    si_ch = ""
    
    for letters in string:
        if letters in cap:
            up_ch += letters
        if letters in sma:
            sm_ch += letters
        if letters in num:
            nu_ch += letters
        if letters in sign:
            si_ch += letters
    
    print("Up_case: ", up_ch, "\nSmall_case: ", sm_ch,
          "\nNumbers: ", nu_ch, "\nSign: ", si_ch)

string = "Hello Test! 123 123, good."
split_string(string)

# Change the position of letters.

string = "Ban"

string[1]
string[0]   
string[3]   
string[2]  
string[5]
string[4]
string[7]

# By for loop. and return only even letters
index1 = 1
index2 = 0
add = ""
for i in range(len(string) // 2):
    add += string[index1] + string[index2]
    index1 += 2
    index2 += 2
print(add)

# By for loop. Return even and odd both letters
index1 = 1
index2 = 0
add = ""
for i in range(len(string) // 2):
    add += string[index1] + string[index2]
    index1 += 2
    index2 += 2
    if index1 == len(string):
        add += string[index2]
print(add)

# By while loop. Return even and both letters
string = "Fruit"
index1 = 1
index2 = 0
add = ""
if len(string) == 1:
    print("Oops! Please type a word more than one letters.")
else:
    while index1 < len(string):
        add += string[index1] + string[index2]
        index1 += 2
        index2 += 2
        if index1 == len(string):
            add += string[index2]
    print(add)

def interchange_letters(string):
    index1 = 1
    index2 = 0
    add = ""
    if len(string) == 1:
        print("Oops! Please type a word more than one letters.")
    else:
        for i in range(len(string) // 2):
            add += string[index1] + string[index2]
            index1 += 2
            index2 += 2
            if index1 == len(string):
                add += string[index2]
        print(add)

string = "Bangladesh"
interchange_letters(string)

# Write a program whether a word is palindrome or not.

string = "Bangladesh"
add = ""
index = -1

for letter in string:
    add += string[index]
    index -= 1
if add == string:
    print("Wow!", string, "is a palindrome word.")
else:
    print("Oops!", string, "is not a palindrome word. Inverse word is: ", add)

# Another Way
string = "Bangladesh"
string[::-1]         # [start:end:step]
string[0:7]
string[0:7:2]

if string == string[::-1]:
    print("Inverse word is: ", string[::-1], ". And its a palindrome word")
else:
    print("Inverse word is: ", string[::-1], ". And its not a palindrome word")

# Data Structure in Python
# List, Tuple, Set, Dictionary
# To add new elements in the last of list we can use append() method.
# List is mutable. The element of list changable.

saarc = ["Bangladesh", "India", "Sri Lanka", "Pakistan",
         "Nepal", "Bhutan"]
print(saarc)
saarc.append("Afganistan")
print(saarc)

# If we want to sort the elemennts of the list in a certain order. We can 
# use sort() method.

saarc = ["Bangladesh", "India", "Sri Lanka", "Pakistan",
         "Nepal", "Bhutan"]
saarc.sort()
print(saarc)

li = [1, 3, 7, 2, 4, 6, 1]
print(li)
li.sort()
print(li)

# If we want to sort the elements of the list in reverse order, we can use
# reverse() method.

li = [1, 2, 3, 4]
li.reverse()
print(li)

li = ["mango", "banana", "orange"]
print(li)
li.reverse()
print(li)

# If we want to add elements anywhere in the list, we can use insert() method.
# insert() method takes two arguments - insert(index, item).

fruits = ["mango", "banana", "orange"]
print(fruits)
fruits.insert(0, "apple")
print(fruits)
fruits.insert(2, "coconut")
print(fruits)

# If we want to exclude any elments of list, we can use remove() method.

print(fruits)
fruits.remove("coconut")
print(fruits)

item = "coconut"
if item in fruits:
    fruits.remove(item)
    print(fruits)
else:
    print(item, "not in fruits")

# Now we will see the use of pop() method. Pop() method retuns the last
# elements of list and exclude that elements.

fruits = ["apple", "orange", "coconut", "banana"]
item = fruits.pop()
print(item)
print(fruits)

item = fruits.pop(2)  # return the specific elements
print(item)
print(fruits)

# If we want add a new list to the last of another list, we can use
# extend() method.

li = [1, 2, 3]
li2 = [3, 4, 5, 6]
li.extend(li2)
li

# If we want to know how many times is an element in a list, we can use
# count() method.

li = [1, 2, 3, 3, 4, 5, 6]
li.count(3)
li.count(5)
li.count(10)

# If we want to delete any elements from list or delete the whole list, we
# can use del() function

li = [1, 2, 3, 3, 4, 5, 6]
del(li[1])
li
del(li[0])
li
del(li)
li

# If we want to make a empty list.

li = []    # empty list
for i in range(10):
    li.append(i)
li

# Arithmetic operation can be done in the list

li = [1, 2, 3]
li2 = [4, 5, 6]
li = li + li2
print(li)

li1 = [1, 2, 3]
li2 = li1 * 3
print(li2)

# If there are many string in the list, then we can make a one string by
# adding them. And we can specify how we add them.

li = ["a", "b", "c"]
print(li)
string = "".join(li)
print(string)

string = ",".join(li)
print(string)

string = "-".join(li)
print(string)

# List comprehensions - List conprehension offers a shorter syntax when you
# want to create a new list based on the value of an existing list.
# I have a list that contains some nubers. Now i want to make a another list
# where every elements will be the double from the previous list.

# Without list comprehension
li = [1, 2, 3, 4]
new_li = []
for x in li:
    new_li.append(x * 2)
new_li

# With list comprehension
li = [1, 2, 3, 4]
new_li = [2 * x for x in li]

# Based on a list of fruits, you want a new list, containing only the fruits
# with the letter "a" in the name.

# Without list comprehension
fruits = ["apple", "cherry", "kiwi", "orange", "mango"]
new_fruits = []
for x in fruits:
    if "a" in x:
        new_fruits.append(x)
new_fruits

# With list comprehension
fruits = ["apple", "cherry", "kiwi", "orange", "mango"]
n_fruits = [x for x in fruits if "a" in x]

# Making even number list with list comprehension
num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_list = [x for x in num_list if x % 2 == 0]

# Making a list with list comprehension where every elements is square of
# another list's element

num_list = [1, 2, 3, 4, 5, 6]
square_list = [x * x for x in num_list]

# Tuple - Tuple is a data structure of python. Tuples are written 
# with parenthesis.

x = (1, 2, 3)
type(x)

x = 1, 2, 3   # That means tuples are written without parenthesis too.
type(x)

# Make tuple with one element
x = 1
type(x)
x = 1,
type(x)
t = ()     # empty tuple
type(t)

# indexing of tuple
tpl = (1, 2, 3)
tpl[0]
tpl[1]
tpl[2]
tpl[3]

# Tuple is not mutable. The elements of tuple is unchangeable.
tpl = (1, 2, 3, 4)
tpl[0] = 5

# We can pack togather more than one variable into tuple. We can unpack a tuple
# and the elements of tuple can be store different variable.

numbers = (10, 20, 30, 40)
n1, n2, n3, n4 = numbers
n1
n2
n3
n4

t = n3, n4
t
type(t)

# We can store different types of data in a tuple and we can apply loop on it.

items = (1, 2, 5.5, ["a", "b", "c"], ("apple", "mango"), "Book", "pen")
for item in items:
    print(item, type(item))

items[3]
items[3][0]
items[4][1]
items[4]

# We can create list easily with tuple elements.
tpl = (1, 2, 3)
li = list(tpl)
li

# Set - Set is a collection of items. Sets are written with curly braces.
# Sets can't have two items with the same value. Set items are unordered,
# unchangeable.

A = set()   # Empty set
type(A)
items = {"pen", "laptop", "cellphone"}
items
type(items)

# Duplicate values will be ignored.
thisset = {"apple", "banana", "cherry", "apple"}
print(thisset)

# We can create set from list or tuple
li = [1, 2, 3, 4]
tpl = (5, 6, 7, 8)

A = set(li)
print(A)
B = set(tpl)
print(B)
type(A)
type(B)

# We can create set from string. In that case each letter of the string
# will be an element of the set.

A = set("Bangladesh")    # Sets are unorderd.
print(A)
type(A)

B = set("Sri Lanka")
print(B)
type(B)

# This is how we can find out if something is a member of a set.

A = {1, 2, 3}
1 in A
2 in A
5 in A

# If we have two sets, we can apply different operation on those sets.
# Common elements of two sets. That's called intersection.
A = {1, 2, 3, 4, 5}
B = {2, 4, 6, 8}
C = A & B      # Intersection
print(C)

# Union - If we want to do union,  namely, the member of any one set A or B
# (Those members can be in both sets.)

A = {1, 2, 3, 4, 5}
B = {2, 4, 6, 8}
C = A | B       # Union
print(C)

# The elements are in any one set but not in both sets at the same time.

A = {1, 2, 3, 4, 5}
B = {2, 4, 6, 8}
C = A ^ B
print(C)

# Difference - In A but not in B

A = {1, 2, 3, 4, 5}
B = {2, 4, 6, 8}
C = A - B
print(C)

# Not element of - B is not in A

A = {1, 2, 3, 4, 5}
B = {2, 4, 6, 8}
C = B - A
print(C)

# Dictionry - Dictionaries are used to store data values in key:value pairs.
# A dictionary is a collection which is unordered, changeable, and does not
# allow duplicates. Dictionaries are written with curly braces, and have
# keys and values.

# create and print a dictionary
thisdict = {"brand" : "ford", "model" : "musting", "year" : "1964"}
print(thisdict)

# Dictionary items are presented in key:value pairs, and can be reffered to by
# using the key name.
# Print the brand value of the dictionary.

thisdict = {"brand" : "ford", "model" : "musting", "year" : "1964"}
print(thisdict["brand"])

# Dictionaries cannot have two items with the same value. Duplicate values 
# will overwrite existing values:

thisdict = {"brand" : "ford", "year" : "2020", "model" : "musting", "year" : "1964"}
print(thisdict)

# To determine how many items a dictionary has, use len() function:
print(len(thisdict))

# The values in dictionary items can be any type
thisdict = {"brand":"ford", "year":2020, "electric":False, "color":["red",1920,]}
type(thisdict)

# store marks
marks = {1:77, 2:76, 5:62, 4:78, 3:65}
marks[3]
print("Marks of roll number 4 is:", marks[4])

marks = {"DHA990": 75, "BAR009": 72, "KHU221": 77}
marks["BAR009"]

# We can create empty dictionary and can add value to it after create.
# we can add string, number, tuple as key items to dictionary. But can't
# add list, set as key item to dictionary
dt = {}
print(dt)
type(dt)
dt[1] = "one"
print(dt)
dt[2] = "two"
print(dt)
dt["String"] = "Bangladesh"
dt[(1,2,3)] = "tuple"
dt[[1,2,3]] = "list" # We can't add list to key value in dictionary
dt[{1,2,3}] = "set"

# This is how We can store bangla and english marks of different students.

marks = {"DHA01": {"Bangla": 74, "English": 73},
         "DHA02": {"Bangla": 70, "English": 75}}

print(marks["DHA01"])
marks["DHA01"]["Bangla"]

marks["DHA03"] = {"Bangla": 68, "English": 72}
print(marks)

marks["DHA03"]
marks["DHA03"]["English"]

# If we want to work with the information about division of bangladesh like - 
# How many District, Upazila, union have in a division, then the ideal
# data structure is dictionary for that job in python.
    
    bd_division_info = {"Barishal": {"District": 6, "Upazila": 42, "Union": 333},
                        "Chittagong": {"District": 11, "Upazila": 104, "Union": 949},
                        "Dhaka": {"District": 13, "Upazila": 93, "Union": 1833},
                        "Khulna": {"District": 10, "Upazila": 59, "Union": 270},
                        "Mymensingh": {"District": 4, "Upazila": 35, "Union": 350},
                        "Rajshahi": {"District": 8, "Upazila": 70, "Union": 558},
                        "Rangpur": {"District": 8, "Upazila": 58, "Union": 536},
                        "Sylhet": {"District": 4, "Upazila": 40, "Union": 334}}

# If we want print only division name. Division names were written in key items.
# So we can find all key items with .keys() method.

bd_division_info.keys()
divisions = bd_division_info.keys()
type(divisions)
print(divisions)

# We can apply lopps on that keys
for division in bd_division_info.keys():
    print("Division: ", division)

# If we want how many upazilas in each division.
for division in bd_division_info.keys():
    print("Division: ", division, "- Upazila: ",
          bd_division_info[division]["Upazila"])

# If we apply loop direct on dictionary, we will get only key items.
for item in bd_division_info:
    print(item)

# If we want to get key and value both items.
for key in bd_division_info:
    print(key)
    print(bd_division_info[key])

# items() method return the items of dictionary
items = bd_division_info.items()
print(items)

for x, y in bd_division_info.items():
    print(x)
    print(y)

total_districts = 0
total_upazilas = 0
total_union = 0

for key in bd_division_info:
    total_districts += bd_division_info[key]["District"]
    total_upazilas += bd_division_info[key]["Upazila"]
    total_union += bd_division_info[key]["Union"]
print("Total Districts of Bangladesh: ", total_districts,
      "\nTotal Upazilas of Bangladesh: ", total_upazilas,
      "\nTotal Unions of Bangladesh: ", total_union)

# Random number - There is a module for produce random number called random.
# .random() method produce randomly any number between 0 to 1 
# .randint(a, b) method produce random number from a to b.

import random
random.random()
random.randint(1, 10)

# From turtle module there is an method named .position(), which is used to
# know the present position of turtle.

import turtle
turtle.position()
turtle.forward(100)
turtle.position()
turtle.left(90)
turtle.position()
turtle.forward(50)
turtle.position()
turtle.backward(200)
turtle.position()
turtle.exitonclick()

# If we want we can set the position of turtle by .setposition().
# Now we will send turtle on a random position and draw a dot.

import turtle
import random

for i in range(20):
    x = random.randint(-200, 200)
    y = random.randint(-200, 200)
    turtle.setposition(x, y)
    turtle.dot()
turtle.done()

turtle.setposition(-10,100)   # individually examine
turtle.done()

# We can hide line on that program

import turtle
import random

turtle.speed(0)
turtle.penup()
for i in range(200):
    x = random.randint(-200, 200)
    y = random.randint(-200, 200)
    turtle.setposition(x, y)
    turtle.dot()
turtle.done()

# Now we will apply color on dot and increase the size of dot

import turtle
import random

turtle.speed(0)
turtle.penup()

# list of colors
colors = ["red", "green", "blue", "yellow", "orange", "black", "purple"]
for i in range(50):
    x = random.randint(-100, 100)
    y = random.randint(-100, 100)
    
    # set a random position
    turtle.setposition(x, y)
    # set a random color
    i = random.randint(0, len(colors)-1)
    turtle.dot(10, colors[i])
turtle.done()

turtle.dot(9)          # increase the size of dot
turtle.exitonclick()
turtle.dot("red")      # change the color of dot
turtle.exitonclick()
turtle.dot(9, "red")   # change color and increase the size of dot
turtle.exitonclick()

# Search a random number

import random

number = random.randint(1, 1000)
attempts = 0
low = 1
high = 1000
while True:
    print("Guess the number (between 1 and 1000): ")
    input_number = (low + high) // 2 # only integer division
    print("My guess is: ", input_number)
    attempts += 1
    
    if input_number == number:
        print("yes, your guess is correct!")
        break
    if input_number > number:
        print("Incorrect! Please try to guess a smaller number.")
        high = input_number - 1
    else:
        print("Incorrect! Please try to guess a larger number.")
        low = input_number + 1
print("You tried", attempts, "times to find the correct number.")

# prime number - A whole number greater than 1 that can not be made by
# multiplying other whole numbers. It is divisible by only 1 and itself.

def is_prime1(n):
    if n < 2:
        return False
    prime = True
    for x in range(2, n):
        if n % x == 0:
            print(n, "is divisible by", x)
            prime = False
    return prime

while True:
    number = int(input("Please enter a number (enter 0 to exit): "))
    if number == 0:
        break
    prime = is_prime1(number)
    if prime is True:
        print(number, "is a prime number.")
    else:
        print(number, "is not a prime number.")


def is_prime2(n): # Efficient way
    if n < 2:
        return False
    prime = True
    for x in range(2, n):
        if n % x == 0:
            print(n, "is divisible by", x)
            prime = False
            return prime
    return prime
        
while True:
    number = int(input("Please enter a number (enter 0 to exit): "))
    if number == 0:
        break
    prime = is_prime2(number)
    if prime is True:
        print(number, "is a prime number.")
    else:
        print(number, "is not a prime number.")
        
def is_prime3(n=1013):    # More efficient way
    if n == 2:
        return True
    if n % 2 == 0:
        print(n, "is divisible by 2.")
        return False
    if n < 2:
        return False
    prime = True
    for x in range(3, n, 2):
        if n % x == 0:
            print(n, "is divisible by", x)
            prime = False
            return prime
    return prime

while True:
    number = int(input("Please enter a number (enter 0 to exit): "))
    if number == 0:
        break
    prime = is_prime3(number)
    if prime is True:
        print(number, "is a prime number.")
    else:
        print(number, "is not a prime number.")

def is_prime4(n=1013):    # Super efficient way
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    prime = True
    m = n // 2 + 1
    for i in range(3, m, 2):
        if n % i == 0:
            prime = False
            return prime
    return prime

import math
def is_prime5(n=1013):     # super duper efficient way
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    m = int(math.sqrt(n)) + 1
    for i in range(3, m, 2):
        if n % i == 0:
            return False
    return True

is_prime5(25)

# Checking the performance
import timeit
t1 = timeit.timeit(is_prime3)
t2 = timeit.timeit(is_prime4)
t3 = timeit.timeit(is_prime5)
print(t2, t3, t2/t3)

# Take two input numbers n1 and n2 where n1 is lower than n2. Now print the
# numbers between n1 and n2 which are prime.

def is_prime5(n):     # super duper efficient way
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    import math
    m = int(math.sqrt(n)) + 1
    for i in range(3, m, 2):
        if n % i == 0:
            return False
    return True

n1 = int(input("Please enter a number: "))
n2 = int(input("Please enter another greater number: "))
for i in range(n1, n2+1):
    prime = is_prime5(i)
    if prime is True:
        print(i)













































